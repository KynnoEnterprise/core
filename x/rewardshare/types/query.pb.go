// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kynno/rewardshare/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryRewardsharesRequest is the request type for the Query/Rewardshares RPC method.
type QueryRewardsharesRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsharesRequest) Reset()         { *m = QueryRewardsharesRequest{} }
func (m *QueryRewardsharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsharesRequest) ProtoMessage()    {}
func (*QueryRewardsharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{0}
}
func (m *QueryRewardsharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsharesRequest.Merge(m, src)
}
func (m *QueryRewardsharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsharesRequest proto.InternalMessageInfo

func (m *QueryRewardsharesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardsharesResponse is the response type for the Query/Rewardshares RPC method.
type QueryRewardsharesResponse struct {
	Rewardshares []Rewardshare `protobuf:"bytes,1,rep,name=rewardshares,proto3" json:"rewardshares"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsharesResponse) Reset()         { *m = QueryRewardsharesResponse{} }
func (m *QueryRewardsharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsharesResponse) ProtoMessage()    {}
func (*QueryRewardsharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{1}
}
func (m *QueryRewardsharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsharesResponse.Merge(m, src)
}
func (m *QueryRewardsharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsharesResponse proto.InternalMessageInfo

func (m *QueryRewardsharesResponse) GetRewardshares() []Rewardshare {
	if m != nil {
		return m.Rewardshares
	}
	return nil
}

func (m *QueryRewardsharesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRewardshareRequest is the request type for the Query/Rewardshare RPC method.
type QueryRewardshareRequest struct {
	// contract identifier is the hex contract address of a contract
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *QueryRewardshareRequest) Reset()         { *m = QueryRewardshareRequest{} }
func (m *QueryRewardshareRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardshareRequest) ProtoMessage()    {}
func (*QueryRewardshareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{2}
}
func (m *QueryRewardshareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardshareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardshareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardshareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardshareRequest.Merge(m, src)
}
func (m *QueryRewardshareRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardshareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardshareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardshareRequest proto.InternalMessageInfo

func (m *QueryRewardshareRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// QueryRewardshareResponse is the response type for the Query/Rewardshare RPC method.
type QueryRewardshareResponse struct {
	Rewardshare Rewardshare `protobuf:"bytes,1,opt,name=rewardshare,proto3" json:"rewardshare"`
}

func (m *QueryRewardshareResponse) Reset()         { *m = QueryRewardshareResponse{} }
func (m *QueryRewardshareResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardshareResponse) ProtoMessage()    {}
func (*QueryRewardshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{3}
}
func (m *QueryRewardshareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardshareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardshareResponse.Merge(m, src)
}
func (m *QueryRewardshareResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardshareResponse proto.InternalMessageInfo

func (m *QueryRewardshareResponse) GetRewardshare() Rewardshare {
	if m != nil {
		return m.Rewardshare
	}
	return Rewardshare{}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryDeployerRewardsharesRequest is the request type for the
// Query/DeployerRewardshares RPC method.
type QueryDeployerRewardsharesRequest struct {
	// deployer bech32 address
	DeployerAddress string `protobuf:"bytes,1,opt,name=deployer_address,json=deployerAddress,proto3" json:"deployer_address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDeployerRewardsharesRequest) Reset()         { *m = QueryDeployerRewardsharesRequest{} }
func (m *QueryDeployerRewardsharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDeployerRewardsharesRequest) ProtoMessage()    {}
func (*QueryDeployerRewardsharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{6}
}
func (m *QueryDeployerRewardsharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeployerRewardsharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeployerRewardsharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeployerRewardsharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeployerRewardsharesRequest.Merge(m, src)
}
func (m *QueryDeployerRewardsharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeployerRewardsharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeployerRewardsharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeployerRewardsharesRequest proto.InternalMessageInfo

func (m *QueryDeployerRewardsharesRequest) GetDeployerAddress() string {
	if m != nil {
		return m.DeployerAddress
	}
	return ""
}

func (m *QueryDeployerRewardsharesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDeployerRewardsharesResponse is the response type for the
// Query/DeployerRewardshares RPC method.
type QueryDeployerRewardsharesResponse struct {
	ContractAddresses []string `protobuf:"bytes,1,rep,name=contract_addresses,json=contractAddresses,proto3" json:"contract_addresses,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDeployerRewardsharesResponse) Reset()         { *m = QueryDeployerRewardsharesResponse{} }
func (m *QueryDeployerRewardsharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDeployerRewardsharesResponse) ProtoMessage()    {}
func (*QueryDeployerRewardsharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{7}
}
func (m *QueryDeployerRewardsharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDeployerRewardsharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDeployerRewardsharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDeployerRewardsharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDeployerRewardsharesResponse.Merge(m, src)
}
func (m *QueryDeployerRewardsharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDeployerRewardsharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDeployerRewardsharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDeployerRewardsharesResponse proto.InternalMessageInfo

func (m *QueryDeployerRewardsharesResponse) GetContractAddresses() []string {
	if m != nil {
		return m.ContractAddresses
	}
	return nil
}

func (m *QueryDeployerRewardsharesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWithdrawerRewardsharesRequest is the request type for the
// Query/WithdrawerRewardshares RPC method.
type QueryWithdrawerRewardsharesRequest struct {
	// withdrawer bech32 address
	WithdrawerAddress string `protobuf:"bytes,1,opt,name=withdrawer_address,json=withdrawerAddress,proto3" json:"withdrawer_address,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawerRewardsharesRequest) Reset()         { *m = QueryWithdrawerRewardsharesRequest{} }
func (m *QueryWithdrawerRewardsharesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawerRewardsharesRequest) ProtoMessage()    {}
func (*QueryWithdrawerRewardsharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{8}
}
func (m *QueryWithdrawerRewardsharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawerRewardsharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawerRewardsharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawerRewardsharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawerRewardsharesRequest.Merge(m, src)
}
func (m *QueryWithdrawerRewardsharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawerRewardsharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawerRewardsharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawerRewardsharesRequest proto.InternalMessageInfo

func (m *QueryWithdrawerRewardsharesRequest) GetWithdrawerAddress() string {
	if m != nil {
		return m.WithdrawerAddress
	}
	return ""
}

func (m *QueryWithdrawerRewardsharesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWithdrawerRewardsharesResponse is the response type for the
// Query/WithdrawerRewardshares RPC method.
type QueryWithdrawerRewardsharesResponse struct {
	ContractAddresses []string `protobuf:"bytes,1,rep,name=contract_addresses,json=contractAddresses,proto3" json:"contract_addresses,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWithdrawerRewardsharesResponse) Reset()         { *m = QueryWithdrawerRewardsharesResponse{} }
func (m *QueryWithdrawerRewardsharesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawerRewardsharesResponse) ProtoMessage()    {}
func (*QueryWithdrawerRewardsharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c12e7654b12af58, []int{9}
}
func (m *QueryWithdrawerRewardsharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawerRewardsharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawerRewardsharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawerRewardsharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawerRewardsharesResponse.Merge(m, src)
}
func (m *QueryWithdrawerRewardsharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawerRewardsharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawerRewardsharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawerRewardsharesResponse proto.InternalMessageInfo

func (m *QueryWithdrawerRewardsharesResponse) GetContractAddresses() []string {
	if m != nil {
		return m.ContractAddresses
	}
	return nil
}

func (m *QueryWithdrawerRewardsharesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRewardsharesRequest)(nil), "kynno.rewardshare.v1.QueryRewardsharesRequest")
	proto.RegisterType((*QueryRewardsharesResponse)(nil), "kynno.rewardshare.v1.QueryRewardsharesResponse")
	proto.RegisterType((*QueryRewardshareRequest)(nil), "kynno.rewardshare.v1.QueryRewardshareRequest")
	proto.RegisterType((*QueryRewardshareResponse)(nil), "kynno.rewardshare.v1.QueryRewardshareResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "kynno.rewardshare.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "kynno.rewardshare.v1.QueryParamsResponse")
	proto.RegisterType((*QueryDeployerRewardsharesRequest)(nil), "kynno.rewardshare.v1.QueryDeployerRewardsharesRequest")
	proto.RegisterType((*QueryDeployerRewardsharesResponse)(nil), "kynno.rewardshare.v1.QueryDeployerRewardsharesResponse")
	proto.RegisterType((*QueryWithdrawerRewardsharesRequest)(nil), "kynno.rewardshare.v1.QueryWithdrawerRewardsharesRequest")
	proto.RegisterType((*QueryWithdrawerRewardsharesResponse)(nil), "kynno.rewardshare.v1.QueryWithdrawerRewardsharesResponse")
}

func init() { proto.RegisterFile("kynno/rewardshare/v1/query.proto", fileDescriptor_9c12e7654b12af58) }

var fileDescriptor_9c12e7654b12af58 = []byte{
	// 688 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0xd1, 0x4b, 0x54, 0x4f,
	0x14, 0xc7, 0x77, 0xfc, 0xfd, 0x5a, 0xf0, 0xac, 0x90, 0x4e, 0x4b, 0xd9, 0x22, 0xb7, 0xf5, 0x26,
	0xa6, 0x82, 0x33, 0xac, 0x52, 0x66, 0x10, 0x91, 0x48, 0x11, 0x11, 0xe8, 0xbe, 0x04, 0xbd, 0xc4,
	0xec, 0xee, 0x70, 0xbd, 0xa4, 0x77, 0xae, 0x33, 0x57, 0x6d, 0x09, 0x5f, 0xea, 0x1f, 0x08, 0xa2,
	0x27, 0xe9, 0x2f, 0xe8, 0xa9, 0x7f, 0x22, 0x7c, 0x0a, 0xa1, 0x97, 0x9e, 0x22, 0xb4, 0xff, 0xa0,
	0x7f, 0x20, 0x9c, 0x99, 0xd5, 0x7b, 0xaf, 0xb7, 0xeb, 0x4d, 0x84, 0xde, 0x96, 0xb9, 0xe7, 0x9c,
	0xef, 0xe7, 0x7c, 0xe7, 0xcc, 0x61, 0xa1, 0xfe, 0xa2, 0x1b, 0x04, 0x82, 0x4a, 0xbe, 0xc5, 0x64,
	0x47, 0xad, 0x30, 0xc9, 0xe9, 0x66, 0x83, 0xae, 0x6f, 0x70, 0xd9, 0x25, 0xa1, 0x14, 0x91, 0xc0,
	0x55, 0x1d, 0x41, 0x62, 0x11, 0x64, 0xb3, 0x51, 0x9b, 0x6a, 0x0b, 0xb5, 0x26, 0x14, 0x6d, 0x31,
	0xc5, 0x4d, 0x38, 0xdd, 0x6c, 0xb4, 0x78, 0xc4, 0x1a, 0x34, 0x64, 0x9e, 0x1f, 0xb0, 0xc8, 0x17,
	0x81, 0xa9, 0x50, 0x73, 0x33, 0x35, 0x3c, 0x1e, 0x70, 0xe5, 0x2b, 0x1b, 0x33, 0x9e, 0x19, 0x13,
	0x17, 0x35, 0x71, 0x23, 0x9e, 0x10, 0xde, 0x2a, 0xa7, 0x2c, 0xf4, 0x29, 0x0b, 0x02, 0x11, 0x69,
	0xa1, 0x5e, 0x95, 0xaa, 0x27, 0x3c, 0xa1, 0x7f, 0xd2, 0xc3, 0x5f, 0xe6, 0xd4, 0x6d, 0xc1, 0xf0,
	0xf2, 0x21, 0x61, 0xf3, 0xb8, 0x9a, 0x6a, 0xf2, 0xf5, 0x0d, 0xae, 0x22, 0xfc, 0x00, 0xe0, 0x98,
	0x77, 0x18, 0xd5, 0xd1, 0x44, 0x65, 0x66, 0x9c, 0x98, 0xe6, 0xc8, 0x61, 0x73, 0xc4, 0x78, 0x61,
	0x9b, 0x23, 0x4b, 0xcc, 0xe3, 0x36, 0xb7, 0x19, 0xcb, 0x74, 0x3f, 0x21, 0xb8, 0x9a, 0x21, 0xa2,
	0x42, 0x11, 0x28, 0x8e, 0x1f, 0xc3, 0x40, 0xac, 0x15, 0x35, 0x8c, 0xea, 0xff, 0x4d, 0x54, 0x66,
	0x46, 0x49, 0x96, 0xb5, 0x24, 0x56, 0x61, 0xe1, 0xff, 0xdd, 0xef, 0xd7, 0x4a, 0xcd, 0x44, 0x32,
	0x7e, 0x98, 0x40, 0xee, 0xd3, 0xc8, 0x37, 0x4e, 0x45, 0x36, 0x24, 0x09, 0xe6, 0x45, 0xb8, 0x92,
	0x46, 0xee, 0xd9, 0x32, 0x09, 0x83, 0x6d, 0x11, 0x44, 0x92, 0xb5, 0xa3, 0xe7, 0xac, 0xd3, 0x91,
	0x5c, 0x29, 0x6d, 0x4e, 0x7f, 0xf3, 0x62, 0xef, 0xfc, 0xbe, 0x39, 0x76, 0xf9, 0x49, 0x77, 0x8f,
	0xfa, 0x7e, 0x04, 0x95, 0x18, 0xba, 0xb5, 0xb7, 0x70, 0xdb, 0xf1, 0x5c, 0xb7, 0x0a, 0x58, 0xcb,
	0x2c, 0x31, 0xc9, 0xd6, 0x7a, 0xd7, 0xe7, 0x2e, 0xc3, 0xa5, 0xc4, 0xa9, 0xd5, 0xbd, 0x03, 0xe5,
	0x50, 0x9f, 0x58, 0xc9, 0x91, 0x6c, 0x49, 0x93, 0x65, 0xd5, 0x6c, 0x86, 0xfb, 0x1e, 0x41, 0x5d,
	0xd7, 0x5c, 0xe4, 0xe1, 0xaa, 0xe8, 0x72, 0x99, 0x35, 0x36, 0x93, 0x30, 0xd8, 0xb1, 0x9f, 0xd3,
	0xfe, 0xf4, 0xce, 0xad, 0x3f, 0xa9, 0x09, 0xeb, 0x3b, 0xf3, 0x84, 0xed, 0x20, 0x18, 0xcd, 0xe1,
	0xb2, 0x9d, 0x4f, 0x03, 0x4e, 0x5f, 0x9c, 0x9d, 0xb7, 0xfe, 0xe6, 0x50, 0xea, 0xea, 0xce, 0x73,
	0x96, 0x76, 0x10, 0xb8, 0x9a, 0xee, 0xa9, 0x1f, 0xad, 0x74, 0x24, 0xdb, 0xca, 0xf6, 0x6d, 0x1a,
	0xf0, 0xd6, 0x51, 0x40, 0xca, 0xb9, 0xa1, 0xe3, 0x2f, 0xe7, 0xed, 0xdd, 0x07, 0x04, 0xd7, 0x73,
	0xe9, 0xfe, 0xad, 0x7b, 0x33, 0xbf, 0xca, 0x70, 0x41, 0xf3, 0xe1, 0x1d, 0x04, 0x03, 0x71, 0x34,
	0x4c, 0xb2, 0x47, 0xf7, 0x4f, 0x0b, 0xad, 0x46, 0x0b, 0xc7, 0x1b, 0x0e, 0x77, 0xea, 0xf5, 0xd7,
	0x9f, 0xef, 0xfa, 0xc6, 0xb0, 0x4b, 0x4f, 0x5b, 0xc1, 0x0a, 0x7f, 0x44, 0x50, 0x89, 0x15, 0xc1,
	0xd3, 0xc5, 0xc4, 0x7a, 0x6c, 0xa4, 0x68, 0xb8, 0x45, 0xbb, 0xab, 0xd1, 0xe6, 0xf0, 0xcd, 0xd3,
	0xd1, 0xe8, 0xab, 0xf4, 0xc5, 0x6d, 0xe3, 0x37, 0x08, 0xca, 0xe6, 0x89, 0xe3, 0x89, 0x1c, 0xe5,
	0xc4, 0x46, 0xa9, 0x4d, 0x16, 0x88, 0xb4, 0x78, 0x63, 0x1a, 0xcf, 0xc1, 0x23, 0xd9, 0x78, 0x66,
	0x9f, 0xe0, 0xcf, 0x08, 0xaa, 0x59, 0x4f, 0x16, 0xdf, 0xca, 0x51, 0xca, 0xd9, 0x3d, 0xb5, 0xb9,
	0xbf, 0xce, 0x3b, 0x8b, 0x9d, 0xe9, 0xf5, 0xb6, 0x8d, 0xbf, 0x20, 0xb8, 0x9c, 0xfd, 0x7e, 0xf0,
	0xed, 0x1c, 0xa4, 0xdc, 0x85, 0x50, 0x9b, 0x3f, 0x43, 0xa6, 0x6d, 0xe7, 0x9e, 0x6e, 0x67, 0x1e,
	0xcf, 0x15, 0x69, 0xe7, 0xe4, 0xd6, 0xd9, 0x5e, 0x78, 0xb2, 0xbb, 0xef, 0xa0, 0xbd, 0x7d, 0x07,
	0xfd, 0xd8, 0x77, 0xd0, 0xdb, 0x03, 0xa7, 0xb4, 0x77, 0xe0, 0x94, 0xbe, 0x1d, 0x38, 0xa5, 0x67,
	0xb3, 0x9e, 0x1f, 0xad, 0x6c, 0xb4, 0x48, 0x5b, 0xac, 0x99, 0xe2, 0x3c, 0x88, 0xb8, 0x0c, 0xa5,
	0xaf, 0x38, 0x6d, 0x0b, 0xc9, 0xe9, 0xcb, 0x84, 0x5a, 0xd4, 0x0d, 0xb9, 0x6a, 0x95, 0xf5, 0xbf,
	0x8d, 0xd9, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x54, 0x12, 0x3e, 0x53, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Rewardshares retrieves all registered rewardshares
	Rewardshares(ctx context.Context, in *QueryRewardsharesRequest, opts ...grpc.CallOption) (*QueryRewardsharesResponse, error)
	// Rewardshare retrieves a registered rewardshare for a given contract address
	Rewardshare(ctx context.Context, in *QueryRewardshareRequest, opts ...grpc.CallOption) (*QueryRewardshareResponse, error)
	// Params retrieves the rewardshare module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DeployerRewardshares retrieves all rewardshares that a given deployer has
	// registered
	DeployerRewardshares(ctx context.Context, in *QueryDeployerRewardsharesRequest, opts ...grpc.CallOption) (*QueryDeployerRewardsharesResponse, error)
	// WithdrawerRewardshares retrieves all rewardshares with a given withdrawer
	// address
	WithdrawerRewardshares(ctx context.Context, in *QueryWithdrawerRewardsharesRequest, opts ...grpc.CallOption) (*QueryWithdrawerRewardsharesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Rewardshares(ctx context.Context, in *QueryRewardsharesRequest, opts ...grpc.CallOption) (*QueryRewardsharesResponse, error) {
	out := new(QueryRewardsharesResponse)
	err := c.cc.Invoke(ctx, "/kynno.rewardshare.v1.Query/Rewardshares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rewardshare(ctx context.Context, in *QueryRewardshareRequest, opts ...grpc.CallOption) (*QueryRewardshareResponse, error) {
	out := new(QueryRewardshareResponse)
	err := c.cc.Invoke(ctx, "/kynno.rewardshare.v1.Query/Rewardshare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/kynno.rewardshare.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DeployerRewardshares(ctx context.Context, in *QueryDeployerRewardsharesRequest, opts ...grpc.CallOption) (*QueryDeployerRewardsharesResponse, error) {
	out := new(QueryDeployerRewardsharesResponse)
	err := c.cc.Invoke(ctx, "/kynno.rewardshare.v1.Query/DeployerRewardshares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawerRewardshares(ctx context.Context, in *QueryWithdrawerRewardsharesRequest, opts ...grpc.CallOption) (*QueryWithdrawerRewardsharesResponse, error) {
	out := new(QueryWithdrawerRewardsharesResponse)
	err := c.cc.Invoke(ctx, "/kynno.rewardshare.v1.Query/WithdrawerRewardshares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Rewardshares retrieves all registered rewardshares
	Rewardshares(context.Context, *QueryRewardsharesRequest) (*QueryRewardsharesResponse, error)
	// Rewardshare retrieves a registered rewardshare for a given contract address
	Rewardshare(context.Context, *QueryRewardshareRequest) (*QueryRewardshareResponse, error)
	// Params retrieves the rewardshare module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DeployerRewardshares retrieves all rewardshares that a given deployer has
	// registered
	DeployerRewardshares(context.Context, *QueryDeployerRewardsharesRequest) (*QueryDeployerRewardsharesResponse, error)
	// WithdrawerRewardshares retrieves all rewardshares with a given withdrawer
	// address
	WithdrawerRewardshares(context.Context, *QueryWithdrawerRewardsharesRequest) (*QueryWithdrawerRewardsharesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Rewardshares(ctx context.Context, req *QueryRewardsharesRequest) (*QueryRewardsharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewardshares not implemented")
}
func (*UnimplementedQueryServer) Rewardshare(ctx context.Context, req *QueryRewardshareRequest) (*QueryRewardshareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewardshare not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DeployerRewardshares(ctx context.Context, req *QueryDeployerRewardsharesRequest) (*QueryDeployerRewardsharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployerRewardshares not implemented")
}
func (*UnimplementedQueryServer) WithdrawerRewardshares(ctx context.Context, req *QueryWithdrawerRewardsharesRequest) (*QueryWithdrawerRewardsharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawerRewardshares not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Rewardshares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rewardshares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kynno.rewardshare.v1.Query/Rewardshares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rewardshares(ctx, req.(*QueryRewardsharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rewardshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardshareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rewardshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kynno.rewardshare.v1.Query/Rewardshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rewardshare(ctx, req.(*QueryRewardshareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kynno.rewardshare.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DeployerRewardshares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeployerRewardsharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DeployerRewardshares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kynno.rewardshare.v1.Query/DeployerRewardshares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DeployerRewardshares(ctx, req.(*QueryDeployerRewardsharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawerRewardshares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawerRewardsharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawerRewardshares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kynno.rewardshare.v1.Query/WithdrawerRewardshares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawerRewardshares(ctx, req.(*QueryWithdrawerRewardsharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kynno.rewardshare.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rewardshares",
			Handler:    _Query_Rewardshares_Handler,
		},
		{
			MethodName: "Rewardshare",
			Handler:    _Query_Rewardshare_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DeployerRewardshares",
			Handler:    _Query_DeployerRewardshares_Handler,
		},
		{
			MethodName: "WithdrawerRewardshares",
			Handler:    _Query_WithdrawerRewardshares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kynno/rewardshare/v1/query.proto",
}

func (m *QueryRewardsharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rewardshares) > 0 {
		for iNdEx := len(m.Rewardshares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewardshares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardshareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardshareRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardshareRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardshareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardshareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardshareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewardshare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDeployerRewardsharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeployerRewardsharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeployerRewardsharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeployerAddress) > 0 {
		i -= len(m.DeployerAddress)
		copy(dAtA[i:], m.DeployerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeployerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDeployerRewardsharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDeployerRewardsharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDeployerRewardsharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddresses) > 0 {
		for iNdEx := len(m.ContractAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractAddresses[iNdEx])
			copy(dAtA[i:], m.ContractAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawerRewardsharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawerRewardsharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawerRewardsharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawerAddress) > 0 {
		i -= len(m.WithdrawerAddress)
		copy(dAtA[i:], m.WithdrawerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawerRewardsharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawerRewardsharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawerRewardsharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddresses) > 0 {
		for iNdEx := len(m.ContractAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractAddresses[iNdEx])
			copy(dAtA[i:], m.ContractAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRewardsharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewardshares) > 0 {
		for _, e := range m.Rewardshares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardshareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardshareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rewardshare.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDeployerRewardsharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeployerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDeployerRewardsharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractAddresses) > 0 {
		for _, s := range m.ContractAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawerRewardsharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawerRewardsharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractAddresses) > 0 {
		for _, s := range m.ContractAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRewardsharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewardshares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewardshares = append(m.Rewardshares, Rewardshare{})
			if err := m.Rewardshares[len(m.Rewardshares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardshareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardshareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardshareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardshareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardshareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardshareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewardshare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewardshare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeployerRewardsharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeployerRewardsharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeployerRewardsharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeployerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDeployerRewardsharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDeployerRewardsharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDeployerRewardsharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddresses = append(m.ContractAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawerRewardsharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawerRewardsharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawerRewardsharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawerRewardsharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawerRewardsharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawerRewardsharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddresses = append(m.ContractAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
